using AutoMapper;
using HMS.Application.Dto;
using HMS.Application.Dto.Doctor;
using HMS.Application.Dto.Role;
using HMS.Application.DTO;
using HMS.Application.DTO.Allergy;
using HMS.Application.DTO.Appointment;
using HMS.Application.DTO.Department;
using HMS.Application.DTO.Doctor;
using HMS.Application.DTO.DoctorDocument;
using HMS.Application.DTO.Insurance;
using HMS.Application.DTO.MedicalHistory;
using HMS.Application.DTO.Patient;
using HMS.Application.DTO.Slot;
using HMS.Application.DTO.Ward;
using HMS.Application.DTOs.PatientVisitDtos;
using HMS.Application.DTOs.Slot;
using HMS.Application.DTOs.Users;
using HMS.Application.ViewModel.Appointment;
using HMS.Application.ViewModel.DoctorDocument;
using HMS.Application.ViewModel.User;
using HMS.Application.ViewModels.Ward;
using HMS.Domain.Entities;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace HMS.Application.Mappings
{
    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            // Create Mappings between Entity ↔ DTOs
            CreateMap<Patient, CreatePatientDto>().ReverseMap();
            CreateMap<Patient, UpdatePatientDto>().ReverseMap();
            CreateMap<Patient, PatientDto>().ReverseMap();
            CreateMap<CreateMedicalHistoryDto, MedicalHistory>().ReverseMap();
            CreateMap<MedicalHistory, GetPatientMedicalHistoryDto>().ReverseMap();
            CreateMap<EditMedicalHistoryDto, MedicalHistory>().ReverseMap();
            CreateMap<AddAllergyDto, Allergy>().ReverseMap();
            CreateMap<Allergy, ViewAllergyDto>().ReverseMap();
            CreateMap<Allergy, EditAllergyDto>().ReverseMap();
            CreateMap<AddAllergyDto, Allergy>().ReverseMap();
            CreateMap<AddInsuranceDto, Insurance>().ReverseMap();
            CreateMap<Insurance, ViewInsuranceDto>().ReverseMap();
            CreateMap<Insurance, EditInsuranceDto>().ReverseMap();
            CreateMap<AddPatientVisitDto, PatientVisit>().ReverseMap();
            CreateMap<PatientVisit, PatientVisitDto>()
                .ForMember(dest => dest.PatientName, opt => opt.MapFrom(src => src.Patient.FullName));
            CreateMap<PatientVisitUpdateDto, PatientVisit>()
                .ForAllMembers(opts => opts.Condition((src, dest, srcMember) => srcMember != null));
            // AddDoctorDto -> Doctor
            CreateMap<AddDoctorDto, Doctor>()
                .ForMember(dest => dest.Id, opt => opt.Ignore())          // Id is generated by DB
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => DateTime.UtcNow))
                .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());  // W
            CreateMap<Doctor, GetDoctorsDto>()
            .ForMember(dest => dest.FullName,
                       opt => opt.MapFrom(src => $"{src.FirstName} {src.LastName}"));
            CreateMap<EditDoctorDto, Doctor>()
                .ForMember(dest => dest.UpdatedAt, opt => opt.MapFrom(src => DateTime.UtcNow));
            CreateMap<AddDepartmentsDto, Department>().ReverseMap();
            CreateMap<Department, DepartmentDto>().ReverseMap();
            CreateMap<Department, EditDepartmentDto>().ReverseMap();
            CreateMap<AddSlotDto, Slot>().ReverseMap();
            CreateMap<SlotDto, SlotDto>().ReverseMap();
            CreateMap<AddAppointmentDTO, Appointment>().ReverseMap();
            CreateMap<AppointmentViewModel, AppointmentViewModel>().ReverseMap();
            CreateMap<Role, GetRoleDto>().ReverseMap();
            CreateMap<AddRoleDto, Role>().ReverseMap();
            CreateMap<EditRoleDto, Role>().ReverseMap();
            CreateMap<CreateAdminDto, User>()
                .ForMember(dest => dest.PasswordHash, opt => opt.Ignore()) // handled in handler
                .ForMember(dest => dest.UserRoles, opt => opt.Ignore())    // handled separately in SP
                .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
                .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());
            CreateMap<User, AdminListVm>()
          .ForMember(dest => dest.UserId, opt => opt.MapFrom(src => src.Id))
          .ForMember(dest => dest.RoleId, opt => opt.MapFrom(src =>
              src.UserRoles.FirstOrDefault().RoleId))
          .ForMember(dest => dest.RoleName, opt => opt.MapFrom(src =>
              src.UserRoles.FirstOrDefault().Role.Name))
          .ForMember(dest => dest.RoleDescription, opt => opt.MapFrom(src =>
              src.UserRoles.FirstOrDefault().Role.Description))
          .ForMember(dest => dest.UserRoleUserId, opt => opt.MapFrom(src =>
              src.UserRoles.FirstOrDefault().UserId))
          .ForMember(dest => dest.UserRoleRoleId, opt => opt.MapFrom(src =>
              src.UserRoles.FirstOrDefault().RoleId))
          .ReverseMap();
            CreateMap<DoctorDocument, DoctorDocumentDto>().ReverseMap();
            CreateMap<DoctorDocument, DoctorDocumentWithDoctorViewModel>()
            .ForMember(dest => dest.DocumentId, opt => opt.MapFrom(src => src.Id))
            .ForMember(dest => dest.DoctorCode, opt => opt.MapFrom(src => src.Doctor.DoctorCode))
            .ForMember(dest => dest.FullName, opt => opt.MapFrom(src => src.Doctor.FullName))
            .ForMember(dest => dest.Specialization, opt => opt.MapFrom(src => src.Doctor.Specialization))
            .ForMember(dest => dest.Qualification, opt => opt.MapFrom(src => src.Doctor.Qualification))
            .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Doctor.Email))
            .ForMember(dest => dest.PhoneNumber, opt => opt.MapFrom(src => src.Doctor.PhoneNumber))
            .ForMember(dest => dest.City, opt => opt.MapFrom(src => src.Doctor.City))
            .ForMember(dest => dest.FileName, opt => opt.MapFrom(src => src.FileName))
            .ForMember(dest => dest.FileType, opt => opt.MapFrom(src => src.FileType))
            .ForMember(dest => dest.FileSize, opt => opt.MapFrom(src => src.FileSize))
            .ForMember(dest => dest.UploadedAt, opt => opt.MapFrom(src => src.UploadedAt))
            .ForMember(dest => dest.UploadedBy, opt => opt.MapFrom(src => src.UploadedBy));

            CreateMap<EditDoctorDocumentDto, DoctorDocument>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.DoctorId, opt => opt.MapFrom(src => src.DoctorId))
                .ForMember(dest => dest.FileName, opt => opt.MapFrom(src => src.FileName))
                .ForMember(dest => dest.FilePath, opt => opt.MapFrom(src => src.FilePath))
                .ForMember(dest => dest.FileType, opt => opt.MapFrom(src => src.FileType))
                .ForMember(dest => dest.FileSize, opt => opt.MapFrom(src => src.FileSize))
                .ForMember(dest => dest.UploadedBy, opt => opt.MapFrom(src => src.UploadedBy))
                .ForMember(dest => dest.UploadedAt, opt => opt.Ignore())  // keep original
                .ForMember(dest => dest.IsActive, opt => opt.Ignore());
            CreateMap<Ward, UpdateWardDto>().ReverseMap();
            CreateMap<AssignDoctorWardDto, DoctorWard>()
              .ForMember(dest => dest.AssignedAt, opt => opt.MapFrom(src => DateTime.UtcNow))
              .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => true))
              .ForMember(dest => dest.UnassignedAt, opt => opt.Ignore())
              .ForMember(dest => dest.UnassignedBy, opt => opt.Ignore())
              .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
              .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => DateTime.UtcNow));
            CreateMap<DoctorWard, DoctorWardAssignmentViewModel>()
          .ForMember(dest => dest.DoctorCode, opt => opt.MapFrom(src => src.Doctor.DoctorCode))
          .ForMember(dest => dest.DoctorName, opt => opt.MapFrom(src => src.Doctor.FullName))
          .ForMember(dest => dest.Specialization, opt => opt.MapFrom(src => src.Doctor.Specialization))
          .ForMember(dest => dest.WardCode, opt => opt.MapFrom(src => src.Ward.WardCode))
          .ForMember(dest => dest.WardName, opt => opt.MapFrom(src => src.Ward.WardName))
          .ForMember(dest => dest.WardType, opt => opt.MapFrom(src => src.Ward.WardType))
          .ForMember(dest => dest.Location, opt => opt.MapFrom(src => src.Ward.Location))
          .ForMember(dest => dest.AssignedAt, opt => opt.MapFrom(src => src.AssignedAt))
          .ForMember(dest => dest.Remarks, opt => opt.MapFrom(src => src.Remarks))
          .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => src.IsActive))
          .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.CreatedAt));

        }
    }
}
